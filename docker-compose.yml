# docker-compose.yml
# Complete Docker Compose setup for Cryptocurrency Data System

services:
  # ClickHouse Database
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: crypto_clickhouse
    ports:
      - "8123:8123"  # HTTP interface
      - "9000:9000"  # Native interface
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      # Remove these lines if config files don't exist

      - ./fastapi/clickhouse/config.xml:/etc/clickhouse-server/config.d/custom.xml
      - ./fastapi/clickhouse/users.xml:/etc/clickhouse-server/users.d/custom.xml

    environment:
      CLICKHOUSE_DB: crypto_data
      CLICKHOUSE_USER: crypto_user
      CLICKHOUSE_PASSWORD: crypto_password
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Redis for caching and message broker
  redis:
    image: redis:7-alpine
    container_name: crypto_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crypto_api
    ports:
      - "8000:8000"
    environment:
      CLICKHOUSE_HOST: clickhouse  # Fixed: matches service name
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_USER: crypto_user
      CLICKHOUSE_PASSWORD: crypto_password
      CLICKHOUSE_DATABASE: crypto_data
      REDIS_URL: redis://redis:6379
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      PYTHONPATH: /app
    depends_on:
      clickhouse:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
    restart: unless-stopped
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crypto_celery_worker
    environment:
      CLICKHOUSE_HOST: clickhouse  # Fixed: matches service name
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_USER: crypto_user
      CLICKHOUSE_PASSWORD: crypto_password
      CLICKHOUSE_DATABASE: crypto_data
      REDIS_URL: redis://redis:6379
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      PYTHONPATH: /app
    depends_on:
      clickhouse:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
    restart: unless-stopped
    command: celery -A app.main.celery_app worker --loglevel=info

  # Celery Beat (Scheduler)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crypto_celery_beat
    environment:
      CLICKHOUSE_HOST: clickhouse  # Fixed: matches service name
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_USER: crypto_user
      CLICKHOUSE_PASSWORD: crypto_password
      CLICKHOUSE_DATABASE: crypto_data
      REDIS_URL: redis://redis:6379
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      PYTHONPATH: /app
    depends_on:
      clickhouse:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
    restart: unless-stopped
    command: celery -A app.main.celery_app beat --loglevel=info

  # Flower (Celery Monitoring)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crypto_flower
    ports:
      - "5555:5555"
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      PYTHONPATH: /app
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - .:/app
    restart: unless-stopped
    command: celery -A app.main.celery_app flower --host=0.0.0.0 --port=5555

volumes:
  clickhouse_data:
  redis_data:

# Removed external network - will use default Docker Compose network