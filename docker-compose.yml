# docker-compose.yml
# Complete Docker Compose setup for Cryptocurrency Data System

version: '3.8'

services:
  # ClickHouse Database
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: crypto_clickhouse
    ports:
      - "8123:8123"  # HTTP interface
      - "9000:9000"  # Native interface
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./clickhouse/config.xml:/etc/clickhouse-server/config.xml
      - ./clickhouse/users.xml:/etc/clickhouse-server/users.xml
    environment:
      CLICKHOUSE_DB: crypto_data
      CLICKHOUSE_USER: crypto_user
      CLICKHOUSE_PASSWORD: crypto_password
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    restart: unless-stopped

  # Redis for caching and message broker
  redis:
    image: redis:7-alpine
    container_name: crypto_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crypto_api
    ports:
      - "8000:8000"
    environment:
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_USER: crypto_user
      CLICKHOUSE_PASSWORD: crypto_password
      CLICKHOUSE_DATABASE: crypto_data
      REDIS_URL: redis://redis:6379
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    depends_on:
      - clickhouse
      - redis
    volumes:
      - ./app:/app
    restart: unless-stopped
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crypto_celery_worker
    environment:
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_USER: crypto_user
      CLICKHOUSE_PASSWORD: crypto_password
      CLICKHOUSE_DATABASE: crypto_data
      REDIS_URL: redis://redis:6379
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    depends_on:
      - clickhouse
      - redis
    volumes:
      - ./app:/app
    restart: unless-stopped
    command: celery -A main.celery_app worker --loglevel=info

  # Celery Beat (Scheduler)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crypto_celery_beat
    environment:
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_USER: crypto_user
      CLICKHOUSE_PASSWORD: crypto_password
      CLICKHOUSE_DATABASE: crypto_data
      REDIS_URL: redis://redis:6379
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    depends_on:
      - clickhouse
      - redis
    volumes:
      - ./app:/app
    restart: unless-stopped
    command: celery -A main.celery_app beat --loglevel=info

  # Flower (Celery Monitoring)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crypto_flower
    ports:
      - "5555:5555"
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    depends_on:
      - redis
    restart: unless-stopped
    command: celery -A main.celery_app flower --host=0.0.0.0 --port=5555

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: crypto_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: crypto_grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped

  # Nginx for load balancing and reverse proxy
  nginx:
    image: nginx:alpine
    container_name: crypto_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
    restart: unless-stopped

volumes:
  clickhouse_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

---

# Dockerfile
FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    software-properties-common \
    git \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY ./app /app

# Create non-root user
RUN useradd --create-home --shell /bin/bash app \
    && chown -R app:app /app
USER app

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=5 \
  CMD curl -f http://localhost:8000/ || exit 1

# Default command
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]

---

# requirements.txt
fastapi==0.104.1
uvicorn[standard]==0.24.0
clickhouse-connect==0.6.23
redis==5.0.1
celery[redis]==5.3.4
pandas==2.1.4
numpy==1.26.2
pandas-ta==0.3.14b0
pydantic==2.5.0
websockets==12.0
aiohttp==3.9.1
flower==2.0.1
prometheus-client==0.19.0
python-multipart==0.0.6
python-jose[cryptography]==3.3.0
passlib[bcrypt]==1.7.4
alembic==1.13.1
sqlalchemy==2.0.23
python-dotenv==1.0.0

---

# .env
# Environment variables for the cryptocurrency data system
CLICKHOUSE_HOST=localhost
CLICKHOUSE_PORT=8123
CLICKHOUSE_USER=crypto_user
CLICKHOUSE_PASSWORD=crypto_password
CLICKHOUSE_DATABASE=crypto_data

REDIS_URL=redis://localhost:6379
CELERY_BROKER_URL=redis://localhost:6379/0
CELERY_RESULT_BACKEND=redis://localhost:6379/0

# API Keys (replace with your actual keys)
BINANCE_API_KEY=your_binance_api_key
BINANCE_SECRET_KEY=your_binance_secret_key
COINGECKO_API_KEY=your_coingecko_api_key
COINMARKETCAP_API_KEY=your_coinmarketcap_api_key

# Security
SECRET_KEY=your-secret-key-change-this-in-production
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# Monitoring
PROMETHEUS_METRICS_ENABLED=true
LOG_LEVEL=INFO